---
# defaults for bootstrap.yml, package.yml, binary.yml vault tasks

# Select the type of Vault to install. Either "oss", "ent" or "hsm".
# `oss` means Open Source.
# `ent` means Enterprise.
# `hsm` means Enterprise with HSM support.
vault_type: oss
# Set the version of the package to install.
vault_version: "1.15.2"
# For package installations, a "release" is required. The package would for example be called `vault-1.12.2-1`.
vault_package_release: "1"
# Select the way to intall Vault. Either "package" or "binary".
vault_installation_method: "binary"
# When `vault_installation_method` is set to "binary", set the path where to (temporarily) download Vault.
vault_download_path: "/tmp/vault-{{ vault_version }}"
# When `vault_installation_method` is set to "binary", set the (base) path where to install Vault. This can be "" or "/opt" for example.
vault_path: ""
# When `vault_installation_method` is set to "binary", set the user Vault will run under. The user "root" is not allowed.
vault_user: vault
# When `vault_installation_method` is set to "binary", set the group Vault will run under. The group "root" is not allowed.
vault_group: vault
# When `vault_installation_method` is set to "binary", set the shell for the vault_user.
vault_user_shell: /bin/false
# Where to store data. That's Raft data and TLS material.
vault_data_directory: /opt/vault

# Hardening advices to disable swap.
vault_hardening_disable_swap: no
# Hardening advices to disable core dumps.
vault_hardening_disable_core_dumps: yes
# Hardening advices to disable shell command history.
vault_hardening_disable_shell_command_history: yes
# Hardening advices to configure SELinux / AppArmor.
vault_hardening_configure_selinux_apparmor: no
vault_ansible_group: 'vault'
vault_cluster_name: 'vault-pki'
# vault_tls_ca_cert_file: /opt/vault/tls/ca.crt
vault_tls_cert_file: '/opt/vault/tls/tls.crt'
vault_tls_key_file: '/opt/vault/tls/tls.key'
vault_tls_directory: '{{ vault_data_directory }}/tls'
vault_home_directory: '/etc/vault.d'
vault_install_directory: '/usr/bin'
vault_license_directory: '{{ vault_data_directory }}/license'
vault_client_addr: '0.0.0.0'
vault_api_port: '8200'
vault_cluster_port: '8201'
vault_ui_enable: true
vault_tls_disable_client_certs: true
vault_unauthenticated_metrics_access: true
vault_storage_backend: 'integrated'
cloud:
  provider: 'none'
vault_seal:
  type: 'shamir'
vault_enable_plugins: false
# vault_plugin_directory: '{{ vault_data_directory }}/plugins'

# defaults for unseal.yml vault tasks

# The address where Vault can be found. Simiar to `VAULT_ADDR`.
vault_initialize_addr: "https://localhost:8200"

# You can show the (sensitive) information of initializing Vault. This includes the root-token and unseal-keys.
vault_initialize_show_information: yes

# default vars for vault

# The `setcap` and openssl binaries must be avaible. The package differs per distribution.
_vault_prerequisites:
  default:
    - file
    - libcap
    - openssl
  Debian:
    - file
    - libcap2-bin
    - openssl
    - procps
vault_prerequisites: "{{ _vault_prerequisites[ansible_os_family] | default(_vault_prerequisites['default']) }}"

# The Vault binary includes an architecture reference, for example "amd64" or "386". This maps relates the ansible_architecture to the name that HashiCorp uses.
_vault_architecture_map:
  x86_64: "amd64"
  arm64: "arm64"
  i386: "386"
vault_architecture: "{{ _vault_architecture_map[ansible_architecture] }}"

# The structure of the package name depends per package manager and type (`oss`, `ent` or `ent+hsm`) installation:
# OSS:
#   APT: "vault={{ vault_version }}-{{ vault_package_release }}". For example: `vault=1.12.3-1`
#   YUM: "vault-{{ vault_version }}-{{ vault_package_release }}". For example: `vault-1.12.3-1`
# ENT:
#   APT: "vault-enterprise={{ vault_version }}+ent-{{ vault_package_release }}". For example: `vault-enterprise=1.12.3+ent-1`
#   YUM: "vault-enterprise-{{ vault-version }}+ent-{{ vault_package_release }}". For example: `vault-enterprise-1.12.3+ent-1`
# ENT+HMS:
#   APT: "vault-enterprise-hsm={{ vault_version }}+ent-{{ vault_package_release }}". For example: `vault-enterprise-hsm=1.12.3+ent-1``
#   YUM: "vault-enterprise-hsm-{{ vault_version }}+ent-{{ vault_pacakge_release }}". For example: `vault-enterprise-hsm-1.12.3+ent-1`

# Map ansible_pkg_mgr to a "separator". Different package managers use different symbols to restrict a version.
_vault_version_separator:
  default: "-"
  apt: "="
vault_version_separator: "{{ _vault_version_separator[ansible_pkg_mgr] | default(_vault_version_separator['default']) }}"

# Map vault_type to a package name.
_vault_package:
  oss: vault{{ vault_version_separator }}{{ vault_version }}-{{ vault_package_release }}
  ent: vault-enterprise{{ vault_version_separator }}{{ vault_version }}+ent-{{ vault_package_release }}
  hsm: vault-enterprise-hsm{{ vault_version_separator }}{{ vault_version }}+ent-{{ vault_package_release }}

# Combine the result of a couple of lookups.
vault_package: "{{ _vault_package[vault_type] }}"

# These are the directories that must exists. Used when vault_installation_method=binary. They are relative to `vault_path`.
vault_directories:
  - name: "{{ vault_path }}/etc/vault.d"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0755"
  - name: "{{ vault_path }}/usr/bin"
    owner: root
    group: root
    mode: "0555"

# Directories to create for Vault data.
vault_data_directories:
  - name: "{{ vault_data_directory }}/data"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0755"
  - name: "{{ vault_data_directory }}/tls"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0700"

# Specific modes for TLS material.
vault_tls_files:
  - name: "{{ vault_data_directory }}/tls/tls.crt"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0600"
  - name: "{{ vault_data_directory }}/tls/tls.key"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0600"
  - name: "{{ vault_data_directory }}/tls"
    owner: "{{ vault_user }}"
    group: "{{ vault_user }}"
    mode: "0700"
